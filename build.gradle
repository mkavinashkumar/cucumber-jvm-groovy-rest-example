import groovyx.gpars.GParsPool

apply plugin: 'groovy'
apply plugin: 'idea'

//build stuff
sourceCompatibility = 1.6
targetCompatibility = 1.6

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

task cucumber() {
    dependsOn assemble
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime
            args = ['-f', 'pretty', '--glue', 'src/test/groovy', 'src/test/resources']
        }
    }
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.codehaus.gpars:gpars:1.1.0"
    }
}

dependencies {
    // Groovy library for groovy building!
    groovy 'org.codehaus.groovy:groovy-all:2.1.0'
    groovy 'org.codehaus.groovy.modules.http-builder:http-builder:0.6'
    groovy 'org.slf4j:slf4j-api:1.7.+'
    groovy 'org.slf4j:slf4j-log4j12:1.7.5'

    //In order to work around bug http://issues.gradle.org/browse/GRADLE-732
    cucumberRuntime files("${jar.archivePath}")

    testCompile 'junit:junit:4.11'
    testCompile 'info.cukes:cucumber-junit:1.1.5'
    testCompile 'info.cukes:cucumber-groovy:1.1.5'
}

repositories {
    mavenCentral()
}

def concurrentMethod(String fileName) {
    def args = ['-f', 'pretty', '--glue', 'src/test/groovy'].join(" ")
    def classpath = configurations.cucumberRuntime.getAsPath()
    def main = "cucumber.api.cli.Main"
    logger.quiet "FileName: $fileName"
    logger.quiet "Running command: \"java -cp $classpath $main $args\""
    def process = "java -cp $classpath $main $args $fileName".execute()
    process.waitForOrKill(25000)
    logger.quiet "Process Out: ${process.text}"
    logger.quiet "Process Err: ${process.err}"
}

task concurrentCucumber() {
    dependsOn assemble
    def cores = Runtime.runtime.availableProcessors()
    def threads = 4
    println "    > Using $threads threads on $cores cores..."
    GParsPool.withPool(threads) {
        def features = fileTree(dir: 'src/test/resources').include '**/*.feature'
        features.eachParallel { File file ->
            logger.quiet "File: ${file.name}"
            concurrentMethod(file.path)
        }
    }
    logger.quiet("Run complete!")
}

task wrapper(type: Wrapper) {
    jarFile = 'wrapper/gradle-wrapper.jar'
    gradleVersion = "1.8"
}